# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""

ip,mask = input('ввод IP-сети в формате: 10.1.1.0/24: ').split('/')
d1,d2,d3,d4 = ip.split('.')
binip = f'{int(d1):>08b}{int(d2):>08b}{int(d3):>08b}{int(d4):>08b}'
# IP && mask = Network IP in binary
rbinip = binip[0:int(mask)] + '0' * (32-int(mask))
bmask = '1' * int(mask) + '0' * (32-int(mask))
bm1,bm2,bm3,bm4 = bmask[0:8],bmask[8:16],bmask[16:24],bmask[24:32]
bi1,bi2,bi3,bi4 = rbinip[0:8],rbinip[8:16],rbinip[16:24],rbinip[24:32]

templ = f'''Network:
{int(bi1, 2):<8}  {int(bi2, 2):<8}  {int(bi3, 2):<8}  {int(bi4, 2):<8}
{bi1}  {bi2}  {bi3}  {bi4}

Mask:
/{mask}
{int(bm1, 2):<8}  {int(bm2, 2):<8}  {int(bm3, 2):<8}  {int(bm4, 2):<8}
{bm1:>08}  {bm2:>08}  {bm3:>08}  {bm4:>08}'''

print(templ)



